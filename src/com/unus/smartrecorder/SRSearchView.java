//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : SRSearchView.java
//  @ Date : 2013-05-30
//  @ Author : 
//
//
package com.unus.smartrecorder;

import java.util.ArrayList;

import android.app.AlertDialog;
import android.content.Context;
import android.util.AttributeSet;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemLongClickListener;
import android.widget.ExpandableListView;
import android.widget.ExpandableListView.OnChildClickListener;
import android.widget.FrameLayout;
import android.widget.ListView;
import android.widget.Toast;

public class SRSearchView extends FrameLayout {
    private Context mContext;
    private SRVoiceControllerInterface mController;
    private ExpandableListView mExpandableListView;
    private SRTagExpandableListAdater expandableTagListAdapter;

    public SRSearchView(Context context) {
        super(context);
        initView(context);
    }
    
    
    public SRSearchView(Context context, SRVoiceControllerInterface controller) {
        super(context);
        mController = controller;
        initView(context);
    }
    
    public SRSearchView(Context context, AttributeSet attrs) {
        super(context, attrs);
        initView(context);
    }

    private void initView(Context context) {
        mContext = context;
        LayoutInflater inflater = (LayoutInflater) context
                .getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        inflater.inflate(R.layout.sr_searchview_layout, this, true);
          
        
        

    }
    
    public void clearTextFilter() {
        if (mExpandableListView != null) {
        	mExpandableListView.clearTextFilter();
        }
    }
    
    public void setFilterText(String filterText) {
        if (mExpandableListView != null) {
        	mExpandableListView.setFilterText(filterText);
        }        
    }
    
    public void deleteTag(SRTagDb tagDb) {
    	expandableTagListAdapter.removeChild(tagDb.getGroupPosition(),tagDb.getChildPosition());
    	
    	//expandableTagListAdapter.remove(tagDb);
    }
    
    public void deleteVoice(SRVoiceDb voiceDb){
    	expandableTagListAdapter.removeGroup(voiceDb.getGroupPosition());
    }
    
    public void setSearchViewMode() {
        SRDebugUtil.SRLog("call setSearchViewMode");
        
        SRDataSource datasource = new SRDataSource(mContext);
        datasource.open();
        
        
        ArrayList<SRVoiceDb> recorders = datasource.getAllRecorder();
        
        
        
        //ArrayList<SRTagDb> tags = datasource.getAllTag();
        
        datasource.close();
        //SRDebugUtil.SRLog("tags = "+tags);
        
        for (int index = 0; index < recorders.size() ; index++){
        	SRDebugUtil.SRLog("recorders = " + recorders.get(index));
        	SRDebugUtil.SRLog("recorders tags = " + recorders.get(index).getmTagList());
        }
        
        
        mExpandableListView = (ExpandableListView)findViewById(R.id.SRSearchExpandableListView);
        expandableTagListAdapter = new SRTagExpandableListAdater(mContext, recorders);
        mExpandableListView.setAdapter(expandableTagListAdapter);
        mExpandableListView.setTextFilterEnabled(true);
        
        

        
        mExpandableListView.setOnChildClickListener(new OnChildClickListener() {
			@Override
			public boolean onChildClick(ExpandableListView parent, View v,
					int groupPosition, int childPosition, long id) {
				// TODO Auto-generated method stub
				//SRDebugUtil.SRLog("setOnChildClickListener : onChildClick = " +expandableTagListAdapter.getChild(groupPosition, childPosition));
				SRTagDb tag = (SRTagDb) expandableTagListAdapter.getChild(groupPosition, childPosition);
				mController.playBySearchList(tag);
				return false;
			}

		});
        
		mExpandableListView.setOnItemLongClickListener(new OnItemLongClickListener() {
			@Override
			public boolean onItemLongClick(AdapterView<?> arg0,
					View arg1, int arg2, long id) {
				// TODO Auto-generated method stub
				
				SRDebugUtil.SRLog("setOnItemLongClickListener onItemLongClick");
				
				if (mExpandableListView.getPackedPositionType(id) == mExpandableListView.PACKED_POSITION_TYPE_CHILD){
					int groupPosition = mExpandableListView.getPackedPositionGroup(id);
					int childPosition = mExpandableListView.getPackedPositionChild(id);
					SRDebugUtil.SRLog("setOnItemLongClickListener" + groupPosition+groupPosition);
					
					
					SRTagDb tag = (SRTagDb) expandableTagListAdapter.getChild(groupPosition, childPosition);
					
					if (tag.getIsTitleType()){
						Toast.makeText(mContext, "시작 태그는 삭제할 수 없습니다.", Toast.LENGTH_SHORT).show();
					}else{
						tag.setGroupPosition(groupPosition);
						tag.setChildPosition(childPosition);
						mController.showDeleteTagDialog(tag);
					}
				}else{
					int groupPosition = mExpandableListView.getPackedPositionGroup(id);
					
					SRVoiceDb voice = (SRVoiceDb) expandableTagListAdapter.getGroup(groupPosition);
					voice.setGroupPosition(groupPosition);
					mController.showDeleteVoiceDialog(voice);
					
				}
				return true;
			}
		});
        
        //mExpandableListView.s
        
//		mListView.setOnItemClickListener(new OnItemClickListener() {
//			@Override
//			public void onItemClick(AdapterView<?> parent, View view,
//					int position, long id) {
//
//				SRDebugUtil.SRLog("SRSearchView : onItemClick() pos = " +position);
//				// //
////				mController.playBySearchList(tagListAdapter.getTagDb(position));
//
//			}
//		});
        
        
        
        //tagListAdapter = new SRTagListAdapter(mContext, R.layout.sr_tag_list, tags);
        
        
        
        
        
        
//        mListView.setAdapter(tagListAdapter);
        
//        mListView = (ListView)findViewById(R.id.SRSearchListView);
//        
//        tagListAdapter = new SRTagListAdapter(mContext, R.layout.sr_tag_list, tags);
//        mListView.setAdapter(tagListAdapter);
//        
//        mListView.setTextFilterEnabled(true);
//        
//        mListView.setOnItemClickListener(new OnItemClickListener() {
//            @Override
//            public void onItemClick(AdapterView<?> parent, View view,
//                    int position, long id) {
//
////            	view.setSelected(true);
////           	SRDebugUtil.SRLog("SRSearchView : onItemClick() pos = " + position);
//////                
//               mController.playBySearchList(tagListAdapter.getTagDb(position));
//               
//            }  
//        });
//        
//        mListView.setOnItemLongClickListener(new OnItemLongClickListener(){
//        	@Override
//        	public boolean onItemLongClick(AdapterView<?> arg0, View arg1,
//        			int position, long id) {
//        		// TODO Auto-generated method stub
////        		SRDebugUtil.SRLog("call setOnItemLongClickListener");
////        		SRDebugUtil.SRLog("tagListAdapter.getTagDb(position) = " + tagListAdapter.getTagDb(position));
//        		mController.showDeleteTagDialog(tagListAdapter.getTagDb(position));
//        		return true;
//        	}
//        });
        
        

    }
    
    
}


